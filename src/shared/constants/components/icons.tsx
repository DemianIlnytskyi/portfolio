import {
    // ArrowLeft,
    // ArrowRight,
    // ArrowUpRight,
    // ChevronDown,
    // ChevronUp,
    // User,
    // Search,
    // Plus,
    // Minus,
    // Filter,
    // Edit,
    // MoreVertical,
    // X,
    // Copy,
    // Mail,
    // Trash,
    // Globe,
    // Link2,
    // Settings,
    Info,
    Menu,
    // Menu,
    // Phone,
    // SortAsc,
    // LogOut,
    // UserCheck,
    // WifiOff,
    // Moon,
    // Heart,
    // Users,
    // Calendar,
    // Ruler,
    // Sunrise,
    // Sliders,
    // FileText,
    // Briefcase,
    // MessageSquare,
    // Tag,
    // ChevronLeft,
    // Paperclip,
    // Star,
    // RefreshCw,
    // EyeOff,
    // Eye,
    // Volume2,
    // Check,
    // LayoutGrid,
    // ListOrdered,
    // MapPin,
    // ... import other icons as needed from lucide-react
} from 'lucide-react';
// import CustomIcon from '@/shared/components/custom_icon';
import { cn } from '@/lib/utils';

export interface IconProps extends React.SVGProps<SVGSVGElement> {
    className?: string;
};

const baseClass = 'select-none cursor-default inline-block text-2xl';

const KIcons = {
    // arrowLeft: (props: IconProps): Component => <ArrowLeft {...props} className={cn(baseClass, 'text-primary', props?.className)} />,
    // arrowBack: (props: IconProps): Component => <ArrowLeft {...props} className={cn(baseClass, props?.className)} />,
    // arrowRight: (props: IconProps): Component => <ArrowRight {...props} className={cn(baseClass, props?.className)} />,
    // person: (props: IconProps): Component => <User {...props} className={cn(baseClass, props?.className)} />,
    // personWhite: (props: IconProps): Component => <User {...props} className={cn(baseClass, 'text-white', props?.className)} />,
    // search: (props: IconProps): Component => <Search {...props} className={cn(baseClass, props?.className)} />,
    // plus: (props: IconProps): Component => <Plus {...props} className={cn(baseClass, props?.className)} />,
    // minus: (props: IconProps): Component => <Minus {...props} className={cn(baseClass, props?.className)} />,
    // filter: (props: IconProps): Component => <Filter {...props} className={cn(baseClass, props?.className)} />,
    // edit: (props: IconProps): Component => <Edit {...props} className={cn(baseClass, props?.className)} />,
    // button: (props: IconProps): Component => <Edit {...props} className={cn(baseClass, props?.className)} />,
    // trailing: (props: IconProps): Component => <ChevronDown {...props} className={cn(baseClass, props?.className)} />,
    // dropListtrailing: (props: IconProps): Component => <ChevronDown {...props} className={cn(baseClass, props?.className)} />,
    // keyboardArrowDown: (props: IconProps): Component => <ChevronDown {...props} className={cn(baseClass, props?.className)} />,
    // keyboardArrowLeft: (props: IconProps): Component => <ArrowLeft {...props} className={cn(baseClass, props?.className)} />,
    // trailingUp: (props: IconProps): Component => <ChevronUp {...props} className={cn(baseClass, props?.className)} />,
    // arrowUpRight: (props: IconProps): Component => <ArrowUpRight {...props} className={cn(baseClass, props?.className)} />,
    // arrowUpRightNeutral: (props: IconProps): Component => <ArrowUpRight {...props} className={cn(baseClass, 'text-neutral', props?.className)} />,
    // arrowUpRightWhite: (props: IconProps): Component => <ArrowUpRight {...props} className={cn(baseClass, 'text-white', props?.className)} />,
    // arrowDownRight: (props: IconProps): Component => <ArrowRight {...props} className={cn(baseClass, props?.className)} />,
    // arrowDownLeft: (props: IconProps): Component => <ArrowLeft {...props} className={cn(baseClass, props?.className)} />,
    // like: (props: IconProps): Component => <Plus {...props} className={cn(baseClass, props?.className)} />,
    // activeLike: (props: IconProps): Component => <Plus {...props} className={cn(baseClass, 'text-primary', props?.className)} />,
    // smile: (props: IconProps): Component => <Info {...props} className={cn(baseClass, props?.className)} />,
    // activeSmile: (props: IconProps): Component => <Info {...props} className={cn(baseClass, 'text-primary', props?.className)} />,
    // dislike: (props: IconProps): Component => <Minus {...props} className={cn(baseClass, props?.className)} />,
    // activeDislike: (props: IconProps): Component => <Minus {...props} className={cn(baseClass, 'text-primary', props?.className)} />,
    // share: (props: IconProps): Component => <ArrowUpRight {...props} className={cn(baseClass, props?.className)} />,
    error: (props: IconProps): Component => <Info {...props} className={cn(baseClass, 'text-ref-error-error-50', props?.className)} />,
    // check: (props: IconProps): Component => <Check {...props} className={cn(baseClass, props?.className)} />,
    // checkWhite: (props: IconProps): Component => <Check {...props} className={cn(baseClass, 'text-white', props?.className)} />,
    // checkSmall: (props: IconProps): Component => <Check {...props} className={cn(baseClass, 'text-xl', props?.className)} />,
    // website: (props: IconProps): Component => <Globe {...props} className={cn(baseClass, props?.className)} />,
    // volum: (props: IconProps): Component => <Volume2 {...props} className={cn(baseClass, props?.className)} />,
    // eye: (props: IconProps): Component => <Eye {...props} className={cn(baseClass, props?.className)} />,
    // eyeOff: (props: IconProps): Component => <EyeOff {...props} className={cn(baseClass, props?.className)} />,
    // refresh: (props: IconProps): Component => <RefreshCw {...props} className={cn(baseClass, props?.className)} />,
    // refreshWhite: (props: IconProps): Component => <RefreshCw {...props} className={cn(baseClass, 'text-white', props?.className)} />,
    // message: (props: IconProps): Component => <MessageSquare {...props} className={cn(baseClass, props?.className)} />,
    // message32: (props: IconProps): Component => <MessageSquare {...props} className={cn(baseClass, 'text-[2rem]', props?.className)} />,
    // star: (props: IconProps): Component => <Star {...props} className={cn(baseClass, props?.className)} />,
    // attachFile: (props: IconProps): Component => <Paperclip {...props} className={cn(baseClass, props?.className)} />,
    // chevronLeft: (props: IconProps): Component => <ChevronLeft {...props} className={cn(baseClass, props?.className)} />,
    // trash: (props: IconProps): Component => <Trash {...props} className={cn(baseClass, props?.className)} />,
    // hello: (props: IconProps): Component => <X {...props} className={cn(baseClass, props?.className)} />,
    // globe: (props: IconProps): Component => <Globe {...props} className={cn(baseClass, props?.className)} />,
    // tag: (props: IconProps): Component => <Tag {...props} className={cn(baseClass, props?.className, 'cursor-pointer')} />,
    // messageSquare: (props: IconProps): Component => <MessageSquare {...props} className={cn(baseClass, props?.className)} />,
    // briefcase: (props: IconProps): Component => <Briefcase {...props} className={cn(baseClass, props?.className)} />,
    // fileText: (props: IconProps): Component => <FileText {...props} className={cn(baseClass, props?.className)} />,
    // meil: (props: IconProps): Component => <Mail {...props} className={cn(baseClass, props?.className)} />,
    // close: (props: IconProps): Component => <X {...props} className={cn(baseClass, props?.className)} />,
    // closeWeight300: (props: IconProps): Component => <X {...props} className={cn(baseClass, props?.className)} />,
    // tune: (props: IconProps): Component => <Sliders {...props} className={cn(baseClass, props?.className)} />,
    // brightnessAlert: (props: IconProps): Component => <Sunrise {...props} className={cn(baseClass, 'text-ref-error-error-50', props?.className)} />,
    // report: (props: IconProps): Component => <Sunrise {...props} className={cn(baseClass, props?.className)} />,
    // distance: (props: IconProps): Component => <Ruler {...props} className={cn(baseClass, props?.className)} />,
    // calendarClock: (props: IconProps): Component => <Calendar {...props} className={cn(baseClass, props?.className)} />,
    // calendarClockVariant70: (props: IconProps): Component => <Calendar {...props} className={cn(baseClass, 'text-ref-neutral-variant-neutral-variant-70', props?.className)} />,
    // user: (props: IconProps): Component => <User {...props} className={cn(baseClass, props?.className)} />,
    // userSecondary: (props: IconProps): Component => <User {...props} className={cn(baseClass, props?.className)} />,
    // link: (props: IconProps): Component => <Link2 {...props} className={cn(baseClass, props?.className)} />,
    // settings: (props: IconProps): Component => <Settings {...props} className={cn(baseClass, props?.className)} />,
    // investors: (props: IconProps): Component => <Users {...props} className={cn(baseClass, props?.className)} />,
    // menu: (props: IconProps): Component => <Menu {...props} className={cn(baseClass, props?.className)} />,
    menu: (props: IconProps): Component => <Menu {...props} className={cn(baseClass, props?.className)} />,
    // info: (props: IconProps): Component => <Info {...props} className={cn(baseClass, props?.className)} />,
    // favorite: (props: IconProps): Component => <Heart {...props} className={cn(baseClass, props?.className)} />,
    // moreVert: (props: IconProps): Component => <MoreVertical {...props} className={cn(baseClass, props?.className)} />,
    // modeOffOn: (props: IconProps): Component => <Moon {...props} className={cn(baseClass, props?.className)} />,
    // arrowBackIOS: (props: IconProps): Component => <ArrowLeft {...props} className={cn(baseClass, props?.className)} />,
    // copy: (props: IconProps): Component => <Copy {...props} className={cn(baseClass, props?.className)} />,
    // noInternet: (props: IconProps): Component => <WifiOff {...props} className={cn(baseClass, props?.className)} />,
    // personEdit: (props: IconProps): Component => <UserCheck {...props} className={cn(baseClass, props?.className)} />,
    // logOut: (props: IconProps): Component => <LogOut {...props} className={cn(baseClass, 'text-white', props?.className)} />,
    // arrowDropDown: (props: IconProps): Component => <ChevronDown {...props} className={cn(baseClass, props?.className)} />,
    // arrowDropUp: (props: IconProps): Component => <ChevronUp {...props} className={cn(baseClass, props?.className)} />,
    // sort: (props: IconProps): Component => <SortAsc {...props} className={cn(baseClass, props?.className)} />,
    // call: (props: IconProps): Component => <Phone {...props} className={cn(baseClass, props?.className)} />,
    // location: (props: IconProps): Component => <MapPin {...props} className={cn(baseClass, props?.className)} />,
    // date: (props: IconProps): Component => <Calendar {...props} className={cn(baseClass, props?.className)} />,
    // gridView: (props: IconProps): Component => <LayoutGrid {...props} className={cn(baseClass, props?.className)} />,
    // viewAgenda: (props: IconProps): Component => <ListOrdered {...props} className={cn(baseClass, props?.className)} />,

    // // Custom font icons
    // logo: (props: IconProps): Component => <CustomIcon {...props} code={0x56} className={cn(baseClass, 'text-6xl cursor-pointer', props?.className)} />,
    // google: (props: IconProps): Component => <CustomIcon {...props} code={0x47} className={cn(baseClass, 'text-neutral', props?.className)} />,
    // myDiscountEmpty: (props: IconProps): Component => <CustomIcon {...props} code={0x64} className={cn(baseClass, 'text-8xl text-ref-neutral-variant-neutral-variant-80', props?.className)} />,
    // facebook: (props: IconProps): Component => <CustomIcon {...props} code={0x46} className={cn(baseClass, props?.className)} />,
    // found: (props: IconProps): Component => <CustomIcon {...props} code={0x53} className={cn(baseClass, 'text-9xl text-ref-neutral-variant-neutral-variant-80', props?.className)} />,
    // instagram: (props: IconProps): Component => <CustomIcon {...props} code={0x49} className={cn(baseClass, props?.className)} />,
    // linkedIn: (props: IconProps): Component => <CustomIcon {...props} code={0x4C} className={cn(baseClass, props?.className)} />,
    // apple: (props: IconProps): Component => <CustomIcon {...props} code={0x41} className={cn(baseClass, 'text-neutral', props?.className)} />,
    // veteransIcon: (props: IconProps): Component => <CustomIcon {...props} code={0x42} className={cn(baseClass, props?.className)} />,
    // dsns: (props: IconProps): Component => <CustomIcon {...props} code={0x44} className={cn(baseClass, props?.className)} />,
    // familyMembers: (props: IconProps): Component => <CustomIcon {...props} code={0x66} className={cn(baseClass, props?.className)} />,
    // military: (props: IconProps): Component => <CustomIcon {...props} code={0x4d} className={cn(baseClass, props?.className)} />,
    // personsWithDisabilities: (props: IconProps): Component => <CustomIcon {...props} code={0x50} className={cn(baseClass, props?.className)} />,
    // police: (props: IconProps): Component => <CustomIcon {...props} code={0x70} className={cn(baseClass, props?.className)} />,
    // ubd: (props: IconProps): Component => <CustomIcon {...props} code={0x43} className={cn(baseClass, props?.className)} />,
    // appleStoreBadge: (props: IconProps): Component => <CustomIcon {...props} code={0x73} className={cn(baseClass, props?.className)} />,
    // googlePlayBadge: (props: IconProps): Component => <CustomIcon {...props} code={0x6D} className={cn(baseClass, props?.className)} />,
};

export default KIcons;